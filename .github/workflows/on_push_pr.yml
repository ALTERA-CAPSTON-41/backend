name: "running unit test"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  unit-test:
    name: "unit test"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - name: "setup go"
        uses: actions/setup-go@v2
        with: 
          go-version: 1.17.5
      - name: running unit test
        run: go test ./... -cover

  build: 
    name: build program
    runs-on: ubuntu-latest
    steps:
      - name: checkout 
        uses: actions/checkout@v2
      - name: setup go
        uses: actions/setup-go@v2
        with: 
          go-version: 1.17.5
      - name: build on go
        run: go build main.go
  
  release:
    name: semantic release
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Semantic GitHub Release
        uses: go-semantic-release/action@v1.17.0
        with: 
          github-token: ${{ secrets.GH_TOKEN }}

  deploy-aws:
    name: deploy to ec2
    runs-on: ubuntu-latest
    needs: 
      - unit-test
      - build
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: add .env
        env:
          ENV: ${{ secrets.STAGING_ENV }}
        run: echo "$ENV" > app.env
      - name: configure ssh
        env: 
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_PEM }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/hms.pem
          chmod 700 ~/.ssh/hms.pem
          cat >> ~/.ssh/config << END
          Host development 
            Hostname $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/hms.pem
            StrictHostKeyChecking=no
          END
      - name: connect ec2
        run: ssh development 'cd workspace/backend && git pull && sudo docker rm -f $(docker ps -aqf "name=clinic-backend*") || true && docker compose up -d'

  # docker-build:
  #   name: build docker image
  #   runs-on: "ubuntu-latest"
  #   needs: [ unit-test, release ]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: config .env
  #       env:
  #         ENV: ${{ secrets.ENV_APP }}
  #       run: echo "$ENV" > app.env
  #     - name: build image
  #       run: docker build -t capstone-41/clinic-api:latest .
  #     - name: login docker registry
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PAT }}
  #     - name: push image to dockerhub
  #       run: docker push capstone-41/clinic-api:latest:latest

