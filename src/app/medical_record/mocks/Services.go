// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	medicalrecord "clinic-api/src/app/medical_record"

	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// AmendMedicalRecordByID provides a mock function with given fields: domain, id
func (_m *Services) AmendMedicalRecordByID(domain medicalrecord.Domain, id string) error {
	ret := _m.Called(domain, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(medicalrecord.Domain, string) error); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMedicalRecord provides a mock function with given fields: domain
func (_m *Services) CreateMedicalRecord(domain medicalrecord.Domain) (string, error) {
	ret := _m.Called(domain)

	var r0 string
	if rf, ok := ret.Get(0).(func(medicalrecord.Domain) string); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(medicalrecord.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMedicalRecordByID provides a mock function with given fields: id
func (_m *Services) FindMedicalRecordByID(id string) (*medicalrecord.Domain, error) {
	ret := _m.Called(id)

	var r0 *medicalrecord.Domain
	if rf, ok := ret.Get(0).(func(string) *medicalrecord.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalrecord.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMedicalRecordByPatientID provides a mock function with given fields: patientID
func (_m *Services) FindMedicalRecordByPatientID(patientID string) ([]medicalrecord.Domain, error) {
	ret := _m.Called(patientID)

	var r0 []medicalrecord.Domain
	if rf, ok := ret.Get(0).(func(string) []medicalrecord.Domain); ok {
		r0 = rf(patientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalrecord.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(patientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMedicalRecordByPatientNIK provides a mock function with given fields: nik
func (_m *Services) FindMedicalRecordByPatientNIK(nik string) ([]medicalrecord.Domain, error) {
	ret := _m.Called(nik)

	var r0 []medicalrecord.Domain
	if rf, ok := ret.Get(0).(func(string) []medicalrecord.Domain); ok {
		r0 = rf(nik)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalrecord.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMedicalRecordByID provides a mock function with given fields: id
func (_m *Services) RemoveMedicalRecordByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
