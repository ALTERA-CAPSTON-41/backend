// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	admin "clinic-api/src/app/admin"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// AmendAdminByID provides a mock function with given fields: id, _a1
func (_m *Services) AmendAdminByID(id string, _a1 admin.Domain) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, admin.Domain) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAdmin provides a mock function with given fields: _a0
func (_m *Services) CreateAdmin(_a0 admin.Domain) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(admin.Domain) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminByID provides a mock function with given fields: id
func (_m *Services) GetAdminByID(id string) (*admin.Domain, error) {
	ret := _m.Called(id)

	var r0 *admin.Domain
	if rf, ok := ret.Get(0).(func(string) *admin.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAdmins provides a mock function with given fields:
func (_m *Services) GetAllAdmins() ([]admin.Domain, error) {
	ret := _m.Called()

	var r0 []admin.Domain
	if rf, ok := ret.Get(0).(func() []admin.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAdminByID provides a mock function with given fields: id
func (_m *Services) RemoveAdminByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServices creates a new instance of Services. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewServices(t testing.TB) *Services {
	mock := &Services{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
