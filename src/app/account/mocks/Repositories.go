// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	account "clinic-api/src/app/account"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

// LookupAccountByEmail provides a mock function with given fields: email
func (_m *Repositories) LookupAccountByEmail(email string) (*account.Domain, error) {
	ret := _m.Called(email)

	var r0 *account.Domain
	if rf, ok := ret.Get(0).(func(string) *account.Domain); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupAdminByUserID provides a mock function with given fields: id
func (_m *Repositories) LookupAdminByUserID(id string) (*account.UserDataDomain, error) {
	ret := _m.Called(id)

	var r0 *account.UserDataDomain
	if rf, ok := ret.Get(0).(func(string) *account.UserDataDomain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.UserDataDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupDoctorByUserID provides a mock function with given fields: id
func (_m *Repositories) LookupDoctorByUserID(id string) (*account.UserDataDomain, error) {
	ret := _m.Called(id)

	var r0 *account.UserDataDomain
	if rf, ok := ret.Get(0).(func(string) *account.UserDataDomain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.UserDataDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupNurseByUserID provides a mock function with given fields: id
func (_m *Repositories) LookupNurseByUserID(id string) (*account.UserDataDomain, error) {
	ret := _m.Called(id)

	var r0 *account.UserDataDomain
	if rf, ok := ret.Get(0).(func(string) *account.UserDataDomain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.UserDataDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositories creates a new instance of Repositories. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositories(t testing.TB) *Repositories {
	mock := &Repositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
