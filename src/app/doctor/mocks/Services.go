// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	doctor "clinic-api/src/app/doctor"

	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// AmendDoctorByID provides a mock function with given fields: id, _a1
func (_m *Services) AmendDoctorByID(id string, _a1 doctor.Domain) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, doctor.Domain) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDoctor provides a mock function with given fields: _a0
func (_m *Services) CreateDoctor(_a0 doctor.Domain) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(doctor.Domain) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(doctor.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDoctors provides a mock function with given fields:
func (_m *Services) GetAllDoctors() ([]doctor.Domain, error) {
	ret := _m.Called()

	var r0 []doctor.Domain
	if rf, ok := ret.Get(0).(func() []doctor.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctorByID provides a mock function with given fields: id
func (_m *Services) GetDoctorByID(id string) (*doctor.Domain, error) {
	ret := _m.Called(id)

	var r0 *doctor.Domain
	if rf, ok := ret.Get(0).(func(string) *doctor.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDoctorByID provides a mock function with given fields: id
func (_m *Services) RemoveDoctorByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
